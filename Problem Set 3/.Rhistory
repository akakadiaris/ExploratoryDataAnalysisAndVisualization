library(dplyr)
# Create the parallel coordinates plot
parcoord_plot <- ggparcoord(nutrients, columns = 2:9)
parcoord_plot
# Create the parallel coordinates plot without scaling
parcoord_plot_unscaled <- ggparcoord(data, columns = 2:5, scale = "uniminmax")
# Create the parallel coordinates plot without scaling
parcoord_plot_unscaled <- ggparcoord(nutrients, columns = 2:5, scale = "uniminmax")
parcoord_plot_unscaled
# Create the parallel coordinates plot without scaling
parcoord_plot_unscaled <- ggparcoord(nutrients, columns = 2:9, scale = "uniminmax")
parcoord_plot_unscaled
library(plotly)
library(GGally)
# Split the data into 5 subsets
num_subsets <- 5
subset_size <- nrow(nutrients) %/% num_subsets
data_subsets <- split(nutrients, rep(1:num_subsets, each = subset_size, length.out = nrow(data)))
# Create an interactive parallel coordinates plot
parcoord_plot <- ggparcoord(data_subsets[[1]], columns = 2:9, scale = "uniminmax")
# Convert the ggparcoord plot to a plotly plot
parcoord_plotly <- ggplotly(parcoord_plot)
# Show the interactive plot
parcoord_plotly
# Read in the file
cod <- read.csv("cod.txt")
print(cod)
View(cod)
# Read in the file
cod <- read.csv("cod.txt")
print(cod[1])
# Read in the file
cod <- read.txt("cod.txt")
# Read in the file
cod <- read.table("cod.txt")
# Read in the file
# Read in the tab-delimited text file
cod <- read.delim("cod.txt", header = TRUE, sep = "\t")
print(cod)
# Read in the file
# Read in the tab-delimited text file
cod <- read.delim("cod.txt", header = TRUE, sep = "\t")
print(cod)
cod <- cod[,-1]
# Calculate the total deaths by 'Gender'
total_deaths_by_gender <- aggregate(Deaths ~ Gender, cod, sum)
# Read in the file
# Read in the tab-delimited text file
cod <- read.delim("cod.txt", header = TRUE, sep = "\t")
print(cod)
cod <- cod[,-1]
# Calculate the total deaths by 'Gender'
total_deaths_by_gender <- aggregate(Deaths ~ Gender, cod, sum)
# Assuming 'total_deaths_by_gender' contains your data
barplot(total_deaths_by_gender$Deaths, names.arg = total_deaths_by_gender$Gender, col = "skyblue", main = "Total Deaths by Gender")
library(ggplot2)
# Read in the file
# Read in the tab-delimited text file
cod <- read.delim("cod.txt", header = TRUE, sep = "\t")
print(cod)
cod <- cod[,-1]
# Calculate the total deaths by 'Gender'
total_deaths_by_gender <- aggregate(Deaths ~ Gender, cod, sum)
# Plot this
ggplot(total_deaths_by_gender, aes(x = Gender, y = Deaths)) +
geom_bar(stat = "identity", fill = "skyblue") +
labs(title = "Total Deaths by Gender", x = "Gender", y = "Total Deaths")
# Create a new column containing the first letter of 'Cause.of.death.Code'
cod$Subchapter <- substr(cod$`Cause.of.death.Code`, 1, 1)
# Filter for V, W, X, and Y causes of death
cod <- cod[cod$Subchapter %in% c("V", "W", "X", "Y"), ]
# Add a column with more descriptive names for the subchapters
cod$Subchapter_Name <- ifelse(data$Subchapter == "V", "Transport Accidents",
ifelse(data$Subchapter == "W", "Falls",
ifelse(data$Subchapter == "X", "Exposure to Smoke, Fire, and Flames",
ifelse(data$Subchapter == "Y", "Assault"))))
# Create a new column containing the first letter of 'Cause.of.death.Code'
cod$Subchapter <- substr(cod$`Cause.of.death.Code`, 1, 1)
# Filter for V, W, X, and Y causes of death
cod <- cod[cod$Subchapter %in% c("V", "W", "X", "Y"), ]
# Add a column with more descriptive names for the subchapters
cod$Subchapter_Name <- ifelse(cod$Subchapter == "V", "Transport Accidents",
ifelse(cod$Subchapter == "W", "Falls",
ifelse(cod$Subchapter == "X", "Exposure to Smoke, Fire, and Flames",
ifelse(cod$Subchapter == "Y", "Assault"))))
# Create a new column containing the first letter of 'Cause.of.death.Code'
cod$Subchapter <- substr(cod$`Cause.of.death.Code`, 1, 1)
# Filter for V, W, X, and Y causes of death
cod <- cod[cod$Subchapter %in% c("V", "W", "X", "Y"), ]
# Add a column with more descriptive names for the subchapters
cod$Subchapter_Name <- ifelse(cod$Subchapter == "V", "Transport Accidents",
ifelse(cod$Subchapter == "W", "Falls",
ifelse(cod$Subchapter == "X", "Exposure to Smoke, Fire, and Flames",
ifelse(cod$Subchapter == "Y", "Assault", "Other Subchapter"))))
# Remove specific age groups and racial group
cod <- cod[!(cod$`Ten.Year.Age.Groups` %in% c("< 1 year", "1-4 years", "5-14 years", "Not Stated") | cod$Race == "American Indian or Alaska Native"), ]
# Shorten the race labels
cod$Race <- ifelse(data$Race == "White", "White",
ifelse(data$Race == "Black or African American", "Black",
ifelse(data$Race == "Asian or Pacific Islander", "Asian", "Other")))
# Create a new column containing the first letter of 'Cause.of.death.Code'
cod$Subchapter <- substr(cod$`Cause.of.death.Code`, 1, 1)
# Filter for V, W, X, and Y causes of death
cod <- cod[cod$Subchapter %in% c("V", "W", "X", "Y"), ]
# Add a column with more descriptive names for the subchapters
cod$Subchapter_Name <- ifelse(cod$Subchapter == "V", "Transport Accidents",
ifelse(cod$Subchapter == "W", "Falls",
ifelse(cod$Subchapter == "X", "Exposure to Smoke, Fire, and Flames",
ifelse(cod$Subchapter == "Y", "Assault", "Other Subchapter"))))
# Remove specific age groups and racial group
cod <- cod[!(cod$`Ten.Year.Age.Groups` %in% c("< 1 year", "1-4 years", "5-14 years", "Not Stated") | cod$Race == "American Indian or Alaska Native"), ]
# Shorten the race labels
cod$Race <- ifelse(cod$Race == "White", "White",
ifelse(cod$Race == "Black or African American", "Black",
ifelse(cod$Race == "Asian or Pacific Islander", "Asian", "Other")))
# Display the breakdown of deaths by subchapter using the descriptive name
library(dplyr)
cod %>%
group_by(Subchapter_Name) %>%
summarise(Total_Deaths = sum(Deaths))
# Create a new column containing the first letter of 'Cause.of.death.Code'
cod$Subchapter <- substr(cod$`Cause.of.death.Code`, 1, 1)
# Filter for V, W, X, and Y causes of death
cod <- cod[cod$Subchapter %in% c("V", "W", "X", "Y"), ]
# Add a column with more descriptive names for the subchapters
cod$Subchapter_Name <- ifelse(cod$Subchapter == "V", "Transport Accidents",
ifelse(cod$Subchapter == "W", "Falls",
ifelse(cod$Subchapter == "X", "Exposure to Smoke, Fire, and Flames",
ifelse(cod$Subchapter == "Y", "Assault", "Other Subchapter"))))
# Remove specific age groups and racial group
cod <- cod[!(cod$`Ten.Year.Age.Groups` %in% c("< 1 year", "1-4 years", "5-14 years", "Not Stated") | cod$Race == "American Indian or Alaska Native"), ]
# Shorten the race labels
cod$Race <- ifelse(cod$Race == "White", "White",
ifelse(cod$Race == "Black or African American", "Black",
ifelse(cod$Race == "Asian or Pacific Islander", "Asian", "Other")))
# Display the breakdown of deaths by subchapter using the descriptive name
library(dplyr)
cod %>%
group_by(Subchapter_Name) %>%
summarise(Total_Deaths = sum(Deaths))
# Create a bar plot
ggplot(death_summary, aes(x = Subchapter_Name, y = Total_Deaths, fill = Subchapter_Name)) +
geom_bar(stat = "identity") +
labs(title = "Breakdown of Deaths by Subchapter", x = "Subchapter", y = "Total Deaths") +
theme_minimal() +
theme(legend.position = "none")  # Remove the legend
# Create a new column containing the first letter of 'Cause.of.death.Code'
cod$Subchapter <- substr(cod$`Cause.of.death.Code`, 1, 1)
# Filter for V, W, X, and Y causes of death
cod <- cod[cod$Subchapter %in% c("V", "W", "X", "Y"), ]
# Add a column with more descriptive names for the subchapters
cod$Subchapter_Name <- ifelse(cod$Subchapter == "V", "Transport Accidents",
ifelse(cod$Subchapter == "W", "Falls",
ifelse(cod$Subchapter == "X", "Exposure to Smoke, Fire, and Flames",
ifelse(cod$Subchapter == "Y", "Assault", "Other Subchapter"))))
# Remove specific age groups and racial group
cod <- cod[!(cod$`Ten.Year.Age.Groups` %in% c("< 1 year", "1-4 years", "5-14 years", "Not Stated") | cod$Race == "American Indian or Alaska Native"), ]
# Shorten the race labels
cod$Race <- ifelse(cod$Race == "White", "White",
ifelse(cod$Race == "Black or African American", "Black",
ifelse(cod$Race == "Asian or Pacific Islander", "Asian", "Other")))
# Display the breakdown of deaths by subchapter using the descriptive name
library(dplyr)
cod %>%
group_by(Subchapter_Name) %>%
summarise(Total_Deaths = sum(Deaths))
# Create a bar plot
ggplot(cod, aes(x = Subchapter_Name, y = Total_Deaths, fill = Subchapter_Name)) +
geom_bar(stat = "identity") +
labs(title = "Breakdown of Deaths by Subchapter", x = "Subchapter", y = "Total Deaths") +
theme_minimal() +
theme(legend.position = "none")  # Remove the legend
# Create a new column containing the first letter of 'Cause.of.death.Code'
cod$Subchapter <- substr(cod$`Cause.of.death.Code`, 1, 1)
# Filter for V, W, X, and Y causes of death
cod <- cod[cod$Subchapter %in% c("V", "W", "X", "Y"), ]
# Add a column with more descriptive names for the subchapters
cod$Subchapter_Name <- ifelse(cod$Subchapter == "V", "Transport Accidents",
ifelse(cod$Subchapter == "W", "Falls",
ifelse(cod$Subchapter == "X", "Exposure to Smoke, Fire, and Flames",
ifelse(cod$Subchapter == "Y", "Assault", "Other Subchapter"))))
# Remove specific age groups and racial group
cod <- cod[!(cod$`Ten.Year.Age.Groups` %in% c("< 1 year", "1-4 years", "5-14 years", "Not Stated") | cod$Race == "American Indian or Alaska Native"), ]
# Shorten the race labels
cod$Race <- ifelse(cod$Race == "White", "White",
ifelse(cod$Race == "Black or African American", "Black",
ifelse(cod$Race == "Asian or Pacific Islander", "Asian", "Other")))
# Display the breakdown of deaths by subchapter using the descriptive name
# Create the breakdown of deaths by subchapter with descriptive names
death_summary <- cod %>%
group_by(Subchapter_Name) %>%
summarise(Total_Deaths = sum(Deaths))
# Create a bar plot
ggplot(death_summary, aes(x = Subchapter_Name, y = Total_Deaths, fill = Subchapter_Name)) +
geom_bar(stat = "identity") +
labs(title = "Breakdown of Deaths by Subchapter", x = "Subchapter", y = "Total Deaths") +
theme_minimal() +
theme(legend.position = "none")  # Remove the legend
# Create a new column containing the first letter of 'Cause.of.death.Code'
cod$Subchapter <- substr(cod$`Cause.of.death.Code`, 1, 1)
# Filter for V, W, X, and Y causes of death
cod <- cod[cod$Subchapter %in% c("V", "W", "X", "Y"), ]
# Add a column with more descriptive names for the subchapters
cod$Subchapter_Name <- ifelse(cod$Subchapter == "V", "Transport Accidents",
ifelse(cod$Subchapter == "W", "Falls",
ifelse(cod$Subchapter == "X", "Exposure to Smoke, Fire, and Flames",
ifelse(cod$Subchapter == "Y", "Assault", "Other Subchapter"))))
# Remove specific age groups and racial group
cod <- cod[!(cod$`Ten.Year.Age.Groups` %in% c("< 1 year", "1-4 years", "5-14 years", "Not Stated") | cod$Race == "American Indian or Alaska Native"), ]
# Shorten the race labels
cod$Race <- ifelse(cod$Race == "White", "White",
ifelse(cod$Race == "Black or African American", "Black",
ifelse(cod$Race == "Asian or Pacific Islander", "Asian", "Other")))
# Display the breakdown of deaths by subchapter using the descriptive name
# Create the breakdown of deaths by subchapter with descriptive names
death_summary <- cod %>%
group_by(Subchapter_Name) %>%
summarise(Total_Deaths = sum(Deaths))
# Create a bar plot
ggplot(death_summary, aes(x = Subchapter_Name, y = Total_Deaths)) +
geom_bar(stat = "identity") +
labs(title = "Breakdown of Deaths by Subchapter", x = "Subchapter", y = "Total Deaths") +
theme_minimal() +
theme(legend.position = "none")  # Remove the legend
# Create a new column containing the first letter of 'Cause.of.death.Code'
cod$Subchapter <- substr(cod$`Cause.of.death.Code`, 1, 1)
# Filter for V, W, X, and Y causes of death
cod <- cod[cod$Subchapter %in% c("V", "W", "X", "Y"), ]
# Add a column with more descriptive names for the subchapters
cod$Subchapter_Name <- ifelse(cod$Subchapter == "V", "Transport Accidents",
ifelse(cod$Subchapter == "W", "Falls",
ifelse(cod$Subchapter == "X", "Exposure to Smoke, Fire, and Flames",
ifelse(cod$Subchapter == "Y", "Assault", "Other Subchapter"))))
# Remove specific age groups and racial group
cod <- cod[!(cod$`Ten.Year.Age.Groups` %in% c("< 1 year", "1-4 years", "5-14 years", "Not Stated") | cod$Race == "American Indian or Alaska Native"), ]
# Shorten the race labels
cod$Race <- ifelse(cod$Race == "White", "White",
ifelse(cod$Race == "Black or African American", "Black",
ifelse(cod$Race == "Asian or Pacific Islander", "Asian", "Other")))
# Display the breakdown of deaths by subchapter using the descriptive name
# Create the breakdown of deaths by subchapter with descriptive names
death_summary <- cod %>%
group_by(Subchapter_Name) %>%
summarise(Total_Deaths = sum(Deaths))
# Create a bar plot
ggplot(death_summary, aes(x = Subchapter_Name, y = Total_Deaths)) +
geom_bar(stat = "identity", fill="lightblue") +
labs(title = "Breakdown of Deaths by Subchapter", x = "Subchapter", y = "Total Deaths") +
theme_minimal() +
theme(legend.position = "none")  # Remove the legend
install.packages("vcd")
library(vcd)
# Mosaic plot for the association between subchapter and race
mosaic(data, formula = Subchapter ~ Race, shading = TRUE, legend = TRUE,
main = "Association between Subchapter and Race")
install.packages("vcd")
library(vcd)
# Mosaic plot for the association between subchapter and race
mosaic(cod, formula = Subchapter ~ Race, shading = TRUE, legend = TRUE,
main = "Association between Subchapter and Race")
install.packages("vcd")
#install.packages("vcd")
library(vcd)
# Mosaic plot for the association between subchapter and race
mosaic(cod, formula = Subchapter ~ Race, shading = TRUE, legend = TRUE,
main = "Association between Subchapter and Race")
#install.packages("vcd")
library(vcd)
# Convert relevant columns to factors if not already
data$Subchapter <- as.factor(data$Subchapter)
#install.packages("vcd")
library(vcd)
# Convert relevant columns to factors if not already
cod$Subchapter <- as.factor(cod$Subchapter)
cod$Race <- as.factor(cod$Race)
cod$Gender <- as.factor(cod$Gender)
cod$Ten.Year.Age.Groups <- as.factor(cod$Ten.Year.Age.Groups)
# Mosaic plot for the association between subchapter and race
mosaic(cod, formula = Subchapter ~ Race, shading = TRUE, legend = TRUE,
main = "Association between Subchapter and Race")
library(ggmosaic)
install.packages('ggmosaic')
library(ggmosaic)
# Create mosaic plots
ggplot(cod, aes(x = Race, y = Subchapter, fill = Gender)) +
geom_mosaic()
#install.packages('ggmosaic')
library(ggmosaic)
# Create mosaic plots
ggplot(data, aes(x = product(Race, Gender), y = Subchapter)) +
geom_mosaic()
#install.packages('ggmosaic')
library(ggmosaic)
# Create mosaic plots
ggplot(cod, aes(x = product(Race, Gender), y = Subchapter)) +
geom_mosaic()
# Create mosaic plot for the association between Subchapter and Race
mosaic(data, formula = Subchapter ~ Race)
# Create mosaic plot for the association between Subchapter and Race
mosaic(cod, formula = Subchapter ~ Race)
# Load the vcd library if not already loaded
library(vcd)
# Create mosaic plots for the associations
mosaicplot(Subchapter ~ Race, data = cod, main = "Association between Subchapter and Race")
mosaicplot(Subchapter ~ Gender, data = cod, main = "Association between Subchapter and Gender")
mosaicplot(Subchapter ~ `Ten.Year.Age.Groups`, data = cod, main = "Association between Subchapter and Age Groups")
# Load the vcd library if not already loaded
library(vcd)
# Create mosaic plots for the associations
mosaicplot(Subchapter ~ Race, data = cod, main = "Association between Subchapter and Race",ylab = list(rot = 90))
# Create a mosaic plot with rotated y-axis labels
ggplot(cod, aes(x = Subchapter, fill = Race)) +
geom_bar(position = "fill") +
coord_flip() +  # Rotate y-axis labels
labs(title = "Association between Subchapter and Race") +
theme(axis.text.y = element_text(angle = 90, hjust = 1))
# Load the vcd library if not already loaded
library(vcd)
# Create mosaic plots for the associations
mosaicplot(Subchapter ~ Race, data = cod, main = "Association between Subchapter and Race")
mosaicplot(Subchapter ~ Gender, data = cod, main = "Association between Subchapter and Gender")
mosaicplot(Subchapter ~ `Ten.Year.Age.Groups`, data = cod, main = "Association between Subchapter and Age Groups")
# Contingency table for Subchapter and Race
table_race_subchapter <- table(cod$Subchapter, cod$Race)
# Chi-square test for Subchapter and Race
chi_square_test_race <- chisq.test(table_race_subchapter)
print(chi_square_test_race)
# Contingency table for Subchapter and Gender
table_gender_subchapter <- table(cod$Subchapter, cod$Gender)
# Chi-square test for Subchapter and Gender
chi_square_test_gender <- chisq.test(table_gender_subchapter)
print(chi_square_test_gender)
# Contingency table for Subchapter and Ten-Year Age Groups
table_age_subchapter <- table(cod$Subchapter, cod$Ten.Year.Age.Groups)
# Chi-square test for Subchapter and Ten-Year Age Groups
chi_square_test_age <- chisq.test(table_age_subchapter)
print(chi_square_test_age)
# Load the vcd library if not already loaded
library(vcd)
# Create separate mosaic plots for each racial group
race_groups <- unique(data$Race)
# Load the vcd library if not already loaded
library(vcd)
# Create separate mosaic plots for each racial group
race_groups <- unique(cod$Race)
for (race in race_groups) {
subset_data <- cod[cod$Race == race, ]
mosaicplot(Subchapter ~ Age + Gender, data = subset_data,
main = paste("Mosaic Plot for", race, "Race"))
}
# Load the vcd library if not already loaded
library(vcd)
# Create separate mosaic plots for each racial group
race_groups <- unique(cod$Race)
for (race in race_groups) {
subset_data <- cod[cod$Race == race, ]
mosaicplot(Subchapter ~ Ten.Year.Age.Group + Gender, data = subset_data,
main = paste("Mosaic Plot for", race, "Race"))
}
# Load the vcd library if not already loaded
library(vcd)
# Create separate mosaic plots for each racial group
race_groups <- unique(cod$Race)
for (race in race_groups) {
subset_data <- cod[cod$Race == race, ]
mosaicplot(Subchapter ~ Ten.Year.Age.Groups + Gender, data = subset_data,
main = paste("Mosaic Plot for", race, "Race"))
}
# Load the vcd library if not already loaded
library(vcd)
# Create separate mosaic plots for each racial group
race_groups <- unique(cod$Race)
for (race in race_groups) {
subset_data <- cod[cod$Race == race, ]
mosaicplot(Subchapter ~ Ten.Year.Age.Groups.Code + Gender, data = subset_data,
main = paste("Mosaic Plot for", race, "Race"))
}
# Load the required packages
library(dplyr)
# Read the data from the CSV file
akff <- read.csv("akff_download.csv")
# Create a function to encode fire danger levels
encode_fire_danger <- function(x) {
case_when(
x <= 33 ~ "Low",
x <= 50 ~ "Moderate",
x <= 75 ~ "High",
x <= 90 ~ "Very High",
TRUE ~ "Extreme"
)
}
# Select and encode the columns for the first eight variables
data_encoded <- data %>%
select(DATE, REGION, ATF, WTEQ, KBDI, TH, I30, ISOD, PM10) %>%
mutate_at(vars(ATF, WTEQ, KBDI, TH, I30, ISOD, PM10), list(FireDanger = ~encode_fire_danger(.)))
# Load the required packages
library(dplyr)
# Read the data from the CSV file
akff <- read.csv("akff_download.csv")
# Create a function to encode fire danger levels
encode_fire_danger <- function(x) {
case_when(
x <= 33 ~ "Low",
x <= 50 ~ "Moderate",
x <= 75 ~ "High",
x <= 90 ~ "Very High",
TRUE ~ "Extreme"
)
}
# Encode fire danger levels for the first eight variables
data <- data %>%
mutate(ATF_FireDanger = encode_fire_danger(ATF),
WTEQ_FireDanger = encode_fire_danger(WTEQ),
KBDI_FireDanger = encode_fire_danger(KBDI),
TH_FireDanger = encode_fire_danger(TH),
I30_FireDanger = encode_fire_danger(I30),
ISOD_FireDanger = encode_fire_danger(ISOD),
PM10_FireDanger = encode_fire_danger(PM10))
# Load the required packages
library(dplyr)
# Read the data from the CSV file
data <- read.csv("akff_download.csv")
# Create a function to encode fire danger levels
encode_fire_danger <- function(x) {
case_when(
x <= 33 ~ "Low",
x <= 50 ~ "Moderate",
x <= 75 ~ "High",
x <= 90 ~ "Very High",
TRUE ~ "Extreme"
)
}
# Encode fire danger levels for the first eight variables and create new columns
data <- data %>%
mutate(ATF_FireDanger = encode_fire_danger(ATF),
WTEQ_FireDanger = encode_fire_danger(WTEQ),
KBDI_FireDanger = encode_fire_danger(KBDI),
TH_FireDanger = encode_fire_danger(TH),
I30_FireDanger = encode_fire_danger(I30),
ISOD_FireDanger = encode_fire_danger(ISOD),
PM10_FireDanger = encode_fire_danger(PM10))
# Load the required packages
library(dplyr)
# Read the data from the CSV file
data <- read.csv("akff_download.csv")
# Create a function to encode fire danger levels
encode_fire_danger <- function(x) {
case_when(
x <= 33 ~ "Low",
x <= 50 ~ "Moderate",
x <= 75 ~ "High",
x <= 90 ~ "Very High",
TRUE ~ "Extreme"
)
}
# Encode fire danger levels for the first eight variables and create new columns
data <- data %>%
mutate(ATF_FireDanger = encode_fire_danger(ATF),
KBDI_FireDanger = encode_fire_danger(KBDI),
TH_FireDanger = encode_fire_danger(TH),
I30_FireDanger = encode_fire_danger(I30),
ISOD_FireDanger = encode_fire_danger(ISOD),
PM10_FireDanger = encode_fire_danger(PM10))
# Load the required packages
library(dplyr)
# Read the data from the CSV file
data <- read.csv("akff_download.csv")
# Create a function to encode fire danger levels
encode_fire_danger <- function(x) {
case_when(
x <= 33 ~ "Low",
x <= 50 ~ "Moderate",
x <= 75 ~ "High",
x <= 90 ~ "Very High",
TRUE ~ "Extreme"
)
}
# Encode fire danger levels for the first eight variables and create new columns
data <- data %>%
mutate(ATF_FireDanger = encode_fire_danger(ATF),
TH_FireDanger = encode_fire_danger(TH),
I30_FireDanger = encode_fire_danger(I30),
ISOD_FireDanger = encode_fire_danger(ISOD),
PM10_FireDanger = encode_fire_danger(PM10))
View(akff)
# Load the required packages
library(dplyr)
# Read the data from the CSV file
data <- read.csv("akff_download.csv")
# Read the data from the CSV file
community <- read.csv("ManhattanCDResults.csv")
print(community)
# Read the data from the CSV file
community <- read.csv("ManhattanCDResults.csv")
print(community)
# subset to only work with Non-safety QoL data
community_df <- subset(community, Type == "Non-safety QoL")
print(community_df)
# Read the data from the CSV file
community <- read.csv("ManhattanCDResults.csv")
print(community)
# subset to only work with Non-safety QoL data
community_df <- subset(community, Type == "Non-safety QoL")
print(community_df)
# Perform PCA Analysis
# Load required libraries
library(tidyr)
library(dplyr)
# Assuming you have a DataFrame named community_df
# Select only the numeric columns for PCA
community_numeric <- community_df %>% select(-District) # Exclude non-numeric identifier column
View(community_df)
