mutate(percentage_protein_calories = (protein_calories / Calories) * 100)
# Use case_when() from dplyr to create a new variable that relies on a complex combination of existing variables
nutrients_labels <- nutrients_percent %>%
mutate(protein_percent_labels = case_when(
percentage_protein_calories < 10 ~ "too little protein",
percentage_protein_calories >= 10 & percentage_protein_calories <= 35 ~ "recommended protein",
percentage_protein_calories > 35 ~ "too much protein"
))
#install.packages('ggrepel')
library(ggrepel)
g3 <- ggplot(nutrients_labels, aes(x = Calories, y = protein_calories, color = protein_percent_labels, label = Food)) +
geom_point() +
labs(x = "Calories", y = "protein_calories") +
geom_text_repel(segment.size = 0.1) +
# Add boundaries by geom_abline() manually
geom_abline(intercept = 1.9, slope = 0.09, col = "black") +
geom_abline(intercept = 1.9, slope = 0.35, col = "black") +
# Scale colors by labels manually
scale_color_manual(values = c("too little protein" = "#00000030", "recommended protein" = "#ff000050", "too much protein" = "#0180FF50")) +
theme_bw()
g3
library(openintro)
head(babies)
# Import packages needed
library(readr)
library(ggplot2)
library(dplyr)
# Set working directory
setwd("/Users/alexandrakakadiaris/Dropbox/A-Family/People/AIK/Columbia/Columbia,FALL23/Exploratory Data Analysis and Visualization/PSet2")
# Import netflix csv file into r
netflix <- read_csv("netflix.csv")
# Make sure imported correctly
head(netflix)
# Use filter to subset the data based on the 'type' column to be only movies
movies <- netflix[netflix$type == "Movie", ]
movies <- netflix[netflix$country == "United States", ]
#head(movies)
# Check for unique values - if not a rating, then delete the rows that are not part of the MPAA rating #should just be G -> PG -> PG13 -> R -> NC-17
unique(movies$rating)
# Create a subset with rows where Ratings is in MPAA rating
subset_movies_df <- subset(movies,rating %in% c("PG-13", "PG", "R", "G", "NC-17"))
subset_movies_df
# Create a factor column with specific ordering
subset_movies_df$rating <- factor(subset_movies_df$rating, levels = c("G","PG","PG-13","R","NC-17"))
# Create a bar plot of the counts
ggplot(subset_movies_df, aes(x = rating)) +
geom_bar(fill ="lightgreen", color="black") +
labs(title = "Movie Ratings in the US", x = "Rating", y = "Frequency") +
theme_minimal()
# Create a new variable 'decade' by cutting 'release_year' into decade groups
decades <- c("1950-1959", "1960-1969", "1970-1979", "1980-1989", "1990-1999", "2000-2009", "2010-2019", "2020-2021")
subset_movies_df$decade <- cut(subset_movies_df$release_year, breaks = seq(1950, 2030, by = 10), right = FALSE, labels=decades)
# Create a bar plot faceted by 'decade' to observe trends in ratings over time
ggplot(subset_movies_df, aes(x = rating)) +
geom_bar(fill="lightgreen") +
facet_wrap(~ decade, nrow = 4) +
labs(title = "Trends in Ratings Over Time by Decade", x = "Rating", y = "Frequency")
# Determine the quantiles of release_year
quantiles <- quantile(subset_movies_df$release_year)
# Create a new column 'period' by cutting release_year into quantile-based groups
subset_movies_df$period <- cut(subset_movies_df$release_year, breaks = quantiles, labels = c("Q1", "Q2", "Q3", "Q4"), include.lowest = TRUE, right=FALSE)
# Calculate the minimum and maximum release year for each quarter
min_max_by_period <- subset_movies_df %>%
group_by(period) %>%
summarize(min_release_year = min(release_year), max_release_year = max(release_year))
print(min_max_by_period)
# Make labeling clear about release year information
subset_movies_df <- subset_movies_df %>%
mutate(period = recode(period, "Q1" = "1955-2002",
"Q2" = "2003-2011",
"Q3" = "2012-2016",
"Q4" = "2017-2021"))
# Create a ratings bar chart faceted by 'period'
ggplot(subset_movies_df, aes(x = rating)) +
geom_bar(fill="lightgreen") +
facet_wrap(~ period, nrow = 2) +
labs(title = "Ratings Distribution Over Equal Size", x = "Rating", y = "Frequency") +  scale_x_discrete(labels = c("PG" = "PG", "PG-13" = "PG-13", "R" = "R", "NC-17" = "NC-17")) + theme(strip.text.x = element_text(size = 11, face = "bold"))
# Use ntile() to create a new column 'period2' with equal-size groups and make labeling clear for period2
subset_movies_df <- subset_movies_df %>%
mutate(period2 = dplyr::ntile(release_year, 4))
min_max_by_period2 <- subset_movies_df %>%
group_by(period2) %>%
summarize(min_release_year = min(release_year), max_release_year = max(release_year))
print(min_max_by_period2)
subset_movies_df <- subset_movies_df %>% mutate(period2 = recode(period2, "1" = "1955-2003", "2" = "2003-2012", "3" = "2012-2017", "4" = "2017-2021"))
# Create a ratings bar chart faceted by 'period' with clear labeling
ggplot(subset_movies_df, aes(x = rating)) +
geom_bar(fill="lightgreen") + facet_wrap(~ period2, nrow = 2) +
labs(title = "Ratings Distribution using ntile()", x = "Rating", y = "Frequency")
#install.packages("Lock5withR")
library(ggplot2)
library("Lock5withR")
head(SleepStudy)
dim(SleepStudy)
# Change 0 and 1's of Gender to be Male and Female
SleepStudy <- SleepStudy %>%
mutate(Gender = case_when(
Gender == 1 ~ "Male",
Gender == 0 ~ "Female",
TRUE ~ as.character(Gender)))
# Create a bar chart for gender
ggplot(SleepStudy, aes(x = Gender)) +
geom_bar(fill = "lightgreen", color="black") +
labs(title = "Gender Distribution", x = "Gender", y = "Frequency")
# Find min and max number of early classes for x-axis
min(SleepStudy$NumEarlyClass)
max(SleepStudy$NumEarlyClass)
# Plot the distribution
ggplot(SleepStudy, aes(x = NumEarlyClass)) +
geom_bar(binwidth = 1, fill = "lightgreen", color = "black") +
scale_x_continuous(breaks = seq(0, 5, by = 1), labels = seq(0, 5, by = 1))+
labs(title = "Number of Early Classes Frequency", x = "Number of Early Classes", y = "Frequency")
# Change the order of the x-axis
SleepStudy$AlcoholUse <- factor(SleepStudy$AlcoholUse,levels=c("Abstain", "Light", "Moderate", "Heavy"))
# Plot the graph
ggplot(SleepStudy, aes(x = AlcoholUse)) +
geom_bar(fill="lightgreen", color = "black") +
labs(title = "Alcohol Use Frequency", x = "Alcohol Use", y = "Frequency")
# Calculate the min and max values for the x-axis
min(SleepStudy$AverageSleep)
max(SleepStudy$AverageSleep)
# Plot the graph
ggplot(SleepStudy, aes(x = AverageSleep)) +
geom_histogram(binwidth = 0.5, fill = "lightgreen", color = "black") +
labs(title = "Average Sleep Duration Distribution", x = "Average Sleep (Hours)", y = "Frequency") +
scale_x_continuous(breaks = seq(4.5, 11, by = 0.5), labels = seq(4.5, 11, by = 0.5))
# Packages needeed for part 3 and part 4
library(ggplot2)
library(dplyr)
library(tidyverse)
library(readr)
library(MASS)
# Load and show the data set
setwd("/Users/alexandrakakadiaris/Dropbox/A-Family/People/AIK/Columbia/Columbia,FALL23/Exploratory Data Analysis and Visualization/PSet2")
nutrients <- read.csv("nutrients.csv")
head(nutrients)
# Drop missing values in the columns Calories and Grams
nutrients %>% drop_na(c('Calories', 'Grams'))
# Transfer Calories and Grams to numeric to calculate calories per gram
nutrients$Calories <- as.numeric(nutrients$Calories)
nutrients$Grams <- as.numeric(nutrients$Grams)
nutrients$calorie_density <- nutrients$Calories / nutrients$Grams
# Use order() to sort the 10% highest calorie_density in nutrients
sorted_cal_density <- nutrients[order(-nutrients$calorie_density), ]
top_10_percent <- head(sorted_cal_density, nrow(sorted_cal_density) * 0.1)
ggplot(top_10_percent, aes(x = calorie_density, y = fct_reorder(Food,calorie_density))) +
geom_point(color = "cornflowerblue") +
# theme_bw() is more readable than theme_linedraw()
theme_bw() +
labs(x = "calorie_density (calories per gram)", y = NULL,
title = "10% of Foods with Highest Calorie Density")
# Use arrange to order rows by specific column
food_categories <- nutrients %>%
drop_na(c("Calories", "Grams")) %>%
group_by(Category) %>%
summarise(mean_calorie_density = mean(calorie_density)) %>%
arrange(mean_calorie_density)
highest_mean_category <- food_categories$Category[food_categories$mean_calorie_density==max(food_categories$mean_calorie_density)]
lowest_mean_category <- food_categories$Category[food_categories$mean_calorie_density==min(food_categories$mean_calorie_density)]
two_food_categories <- nutrients %>%
filter(Category %in% c(highest_mean_category, lowest_mean_category))
ggplot(two_food_categories, aes(x = calorie_density, y = reorder(Food, calorie_density))) +
geom_point(color = "cornflowerblue") +
facet_grid(Category~., scales = "free_y", space = "free_y") +
labs(title = "Cleveland Dot Plot of Calorie Density by Food", y = NULL) +
theme_bw()
# Use gsub() to replace t with 0
nutrients_no_t <- nutrients %>% drop_na(c("Protein", "Carbs", "Calories"))
nutrients_no_t$Protein <- gsub("t", "0", nutrients_no_t$Protein)
nutrients_no_t$Carbs<- gsub("t", "0", nutrients_no_t$Carbs)
# Combine different "Fruit" and "Vegetables" categories
nutrients_long <- nutrients_no_t %>%
mutate(Category = ifelse(Category %in% c("Fruits A-F", "Fruits G-P", "Fruits R-Z"), "Fruit", ifelse(Category %in% c("Vegetables A-E", "Vegetables F-P", "Vegetables R-Z"), "Vegetables", Category)))
# Transfer Calories, Protein, and Carbs to numeric to calculate density
nutrients_long$Calories <- as.numeric(nutrients_long$Calories)
nutrients_long$Carbs <- as.numeric(nutrients_long$Carbs)
nutrients_long$Protein <- as.numeric(nutrients_long$Protein)
nutrients_long$protein_density <- nutrients_long$Protein / nutrients_long$Grams
nutrients_long$carbs_density <- nutrients_long$Carbs / nutrients_long$Grams
ggplot(nutrients_long, aes(x = protein_density, y = carbs_density)) +
geom_point(color = "cornflowerblue") +
facet_wrap(~Category ) +
labs(title = "Scatterplot of Protein Density vs. Carbohydrate Density",
x = "Protein Density",
y = "Carbohydrate Density") +
theme_bw(4)
library(plotly)
nutrients_protein_calories <- nutrients_no_t
nutrients_protein_calories <- nutrients_protein_calories %>%
mutate(protein_calories = as.numeric(Protein) * 4)
g <- ggplot(nutrients_protein_calories, aes(Calories, protein_calories, label = Food)) + labs(title = "Protein Categories vs Overall Categories with problematic rows") +
geom_point(color = "cornflowerblue")
ggplotly(g)
# Clear Error: protein_calories shouldn't exceed overall calories, remove the rows and redraw. And there is a negative protein_calories, remove that too.
nutrients_protein_calories_rm <- nutrients_protein_calories %>%
filter(protein_calories <= Calories)
# Remove negative protein_calories
nutrients_protein_calories_rm <- nutrients_protein_calories_rm %>%
filter(protein_calories >= 0)
g2 <- ggplot(nutrients_protein_calories_rm, aes(Calories, protein_calories, label = Food)) +
geom_point(color = "cornflowerblue") + labs(title = "Protein Categories vs Overall Categories without problematic rows")
ggplotly(g2)
# Rows that are removed
rm_rows <- nutrients_protein_calories %>%
filter(protein_calories > Calories | protein_calories < 0)
print(rm_rows)
# Row 31, 32, 83, 101, 142 in the original nutrients dataset are removed.
# Calculate the percentage of protein calories
nutrients_percent <- nutrients_protein_calories_rm %>%
mutate(percentage_protein_calories = (protein_calories / Calories) * 100)
# Use case_when() from dplyr to create a new variable that relies on a complex combination of existing variables
nutrients_labels <- nutrients_percent %>%
mutate(protein_percent_labels = case_when(
percentage_protein_calories < 10 ~ "too little protein",
percentage_protein_calories >= 10 & percentage_protein_calories <= 35 ~ "recommended protein",
percentage_protein_calories > 35 ~ "too much protein"
))
#install.packages('ggrepel')
library(ggrepel)
g3 <- ggplot(nutrients_labels, aes(x = Calories, y = protein_calories, color = protein_percent_labels, label = Food)) +
geom_point() +
labs(x = "Calories", y = "protein_calories") +
geom_text_repel(segment.size = 0.1) +
# Add boundaries by geom_abline() manually
geom_abline(intercept = 1.9, slope = 0.09, col = "black") +
geom_abline(intercept = 1.9, slope = 0.35, col = "black") +
# Scale colors by labels manually
scale_color_manual(values = c("too little protein" = "#00000030", "recommended protein" = "#ff000050", "too much protein" = "#0180FF50")) +
theme_bw()
g3
library(openintro)
head(babies)
ggplot(babies, aes(y = bwt, x = gestation)) +
geom_point(size = 1.5, alpha = 0.3) +
labs(title = "Scatterplot",
y = "bwt (in ounces)",
x = "gestation (in days)")
ggplot(babies, aes(y = bwt, x = gestation)) +
geom_point(size = 1.5, alpha = 0.3) +
geom_density2d() +
labs(title = "Scatterplot with Density Contour Lines",
y = "bwt (in ounces)",
x = "gestation (in days)")
ggplot(babies, aes(y = bwt, x = gestation)) +
geom_hex(binwidth = c(5, 5)) +
scale_fill_viridis_c() +
labs(title = "Hexagonal Heatmap of Bin Counts",
y = "bwt (in ounces)",
x = "gestation (in days)")
ggplot(babies, aes(y = bwt, x = gestation)) +
geom_bin2d(binwidth = c(5, 5)) +
scale_fill_viridis_c() +
labs(title = "Square Heatmap of Bin Counts",
y = "bwt (in ounces)",
x = "gestation (in days)")
setwd("/Users/alexandrakakadiaris/Dropbox/A-Family/People/AIK/Columbia/Columbia,FALL23/Exploratory Data Analysis and Visualization/PSet2")
# Import packages needed
library(readr)
library(ggplot2)
library(dplyr)
# Set working directory
#setwd("/Users/alexandrakakadiaris/Dropbox/A-Family/People/AIK/Columbia/Columbia,FALL23/Exploratory Data Analysis and Visualization/PSet2")
# Import netflix csv file into r
netflix <- read_csv("netflix.csv")
setwd("~/Desktop")
setwd("/Users/alexandrakakadiaris/Dropbox/A-Family/People/AIK/Columbia/Columbia,FALL23/Exploratory Data Analysis and Visualization/PSet2")
# Import packages needed
library(readr)
library(ggplot2)
library(dplyr)
# Set working directory
#setwd("/Users/alexandrakakadiaris/Dropbox/A-Family/People/AIK/Columbia/Columbia,FALL23/Exploratory Data Analysis and Visualization/PSet2")
# Import netflix csv file into r
netflix <- read_csv("netflix.csv")
# Import packages needed
library(readr)
library(ggplot2)
library(dplyr)
# Set working directory
#setwd("/Users/alexandrakakadiaris/Dropbox/A-Family/People/AIK/Columbia/Columbia,FALL23/Exploratory Data Analysis and Visualization/PSet2")
# Import netflix csv file into r
netflix <- read_csv("netflix.csv")
# Make sure imported correctly
head(netflix)
# Import packages needed
library(readr)
library(ggplot2)
library(dplyr)
# Import netflix csv file into r
netflix <- read_csv("netflix.csv")
# Make sure imported correctly
head(netflix)
# Use filter to subset the data based on the 'type' column to be only movies
movies <- netflix[netflix$type == "Movie", ]
movies <- netflix[netflix$country == "United States", ]
#head(movies)
# Check for unique values - if not a rating, then delete the rows that are not part of the MPAA rating #should just be G -> PG -> PG13 -> R -> NC-17
unique(movies$rating)
# Create a subset with rows where Ratings is in MPAA rating
subset_movies_df <- subset(movies,rating %in% c("PG-13", "PG", "R", "G", "NC-17"))
subset_movies_df
# Create a factor column with specific ordering
subset_movies_df$rating <- factor(subset_movies_df$rating, levels = c("G","PG","PG-13","R","NC-17"))
# Create a bar plot of the counts
ggplot(subset_movies_df, aes(x = rating)) +
geom_bar(fill ="lightgreen", color="black") +
labs(title = "Movie Ratings in the US", x = "Rating", y = "Frequency") +
theme_minimal()
# Create a new variable 'decade' by cutting 'release_year' into decade groups
decades <- c("1950-1959", "1960-1969", "1970-1979", "1980-1989", "1990-1999", "2000-2009", "2010-2019", "2020-2021")
subset_movies_df$decade <- cut(subset_movies_df$release_year, breaks = seq(1950, 2030, by = 10), right = FALSE, labels=decades)
# Create a bar plot faceted by 'decade' to observe trends in ratings over time
ggplot(subset_movies_df, aes(x = rating)) +
geom_bar(fill="lightgreen") +
facet_wrap(~ decade, nrow = 4) +
labs(title = "Trends in Ratings Over Time by Decade", x = "Rating", y = "Frequency")
# Determine the quantiles of release_year
quantiles <- quantile(subset_movies_df$release_year)
# Create a new column 'period' by cutting release_year into quantile-based groups
subset_movies_df$period <- cut(subset_movies_df$release_year, breaks = quantiles, labels = c("Q1", "Q2", "Q3", "Q4"), include.lowest = TRUE, right=FALSE)
# Calculate the minimum and maximum release year for each quarter
min_max_by_period <- subset_movies_df %>%
group_by(period) %>%
summarize(min_release_year = min(release_year), max_release_year = max(release_year))
print(min_max_by_period)
# Make labeling clear about release year information
subset_movies_df <- subset_movies_df %>%
mutate(period = recode(period, "Q1" = "1955-2002",
"Q2" = "2003-2011",
"Q3" = "2012-2016",
"Q4" = "2017-2021"))
# Create a ratings bar chart faceted by 'period'
ggplot(subset_movies_df, aes(x = rating)) +
geom_bar(fill="lightgreen") +
facet_wrap(~ period, nrow = 2) +
labs(title = "Ratings Distribution Over Equal Size", x = "Rating", y = "Frequency") +  scale_x_discrete(labels = c("PG" = "PG", "PG-13" = "PG-13", "R" = "R", "NC-17" = "NC-17")) + theme(strip.text.x = element_text(size = 11, face = "bold"))
# Use ntile() to create a new column 'period2' with equal-size groups and make labeling clear for period2
subset_movies_df <- subset_movies_df %>%
mutate(period2 = dplyr::ntile(release_year, 4))
min_max_by_period2 <- subset_movies_df %>%
group_by(period2) %>%
summarize(min_release_year = min(release_year), max_release_year = max(release_year))
print(min_max_by_period2)
subset_movies_df <- subset_movies_df %>% mutate(period2 = recode(period2, "1" = "1955-2003", "2" = "2003-2012", "3" = "2012-2017", "4" = "2017-2021"))
# Create a ratings bar chart faceted by 'period' with clear labeling
ggplot(subset_movies_df, aes(x = rating)) +
geom_bar(fill="lightgreen") + facet_wrap(~ period2, nrow = 2) +
labs(title = "Ratings Distribution using ntile()", x = "Rating", y = "Frequency")
#install.packages("Lock5withR")
library(ggplot2)
library("Lock5withR")
head(SleepStudy)
dim(SleepStudy)
# Change 0 and 1's of Gender to be Male and Female
SleepStudy <- SleepStudy %>%
mutate(Gender = case_when(
Gender == 1 ~ "Male",
Gender == 0 ~ "Female",
TRUE ~ as.character(Gender)))
# Create a bar chart for gender
ggplot(SleepStudy, aes(x = Gender)) +
geom_bar(fill = "lightgreen", color="black") +
labs(title = "Gender Distribution", x = "Gender", y = "Frequency")
# Find min and max number of early classes for x-axis
min(SleepStudy$NumEarlyClass)
max(SleepStudy$NumEarlyClass)
# Plot the distribution
ggplot(SleepStudy, aes(x = NumEarlyClass)) +
geom_bar(binwidth = 1, fill = "lightgreen", color = "black") +
scale_x_continuous(breaks = seq(0, 5, by = 1), labels = seq(0, 5, by = 1))+
labs(title = "Number of Early Classes Frequency", x = "Number of Early Classes", y = "Frequency")
# Change the order of the x-axis
SleepStudy$AlcoholUse <- factor(SleepStudy$AlcoholUse,levels=c("Abstain", "Light", "Moderate", "Heavy"))
# Plot the graph
ggplot(SleepStudy, aes(x = AlcoholUse)) +
geom_bar(fill="lightgreen", color = "black") +
labs(title = "Alcohol Use Frequency", x = "Alcohol Use", y = "Frequency")
# Calculate the min and max values for the x-axis
min(SleepStudy$AverageSleep)
max(SleepStudy$AverageSleep)
# Plot the graph
ggplot(SleepStudy, aes(x = AverageSleep)) +
geom_histogram(binwidth = 0.5, fill = "lightgreen", color = "black") +
labs(title = "Average Sleep Duration Distribution", x = "Average Sleep (Hours)", y = "Frequency") +
scale_x_continuous(breaks = seq(4.5, 11, by = 0.5), labels = seq(4.5, 11, by = 0.5))
# Packages needeed for part 3 and part 4
library(ggplot2)
library(dplyr)
library(tidyverse)
library(readr)
library(MASS)
nutrients <- read.csv("nutrients.csv")
head(nutrients)
# Drop missing values in the columns Calories and Grams
nutrients %>% drop_na(c('Calories', 'Grams'))
# Transfer Calories and Grams to numeric to calculate calories per gram
nutrients$Calories <- as.numeric(nutrients$Calories)
nutrients$Grams <- as.numeric(nutrients$Grams)
nutrients$calorie_density <- nutrients$Calories / nutrients$Grams
# Use order() to sort the 10% highest calorie_density in nutrients
sorted_cal_density <- nutrients[order(-nutrients$calorie_density), ]
top_10_percent <- head(sorted_cal_density, nrow(sorted_cal_density) * 0.1)
ggplot(top_10_percent, aes(x = calorie_density, y = fct_reorder(Food,calorie_density))) +
geom_point(color = "cornflowerblue") +
# theme_bw() is more readable than theme_linedraw()
theme_bw() +
labs(x = "calorie_density (calories per gram)", y = NULL,
title = "10% of Foods with Highest Calorie Density")
# Use arrange to order rows by specific column
food_categories <- nutrients %>%
drop_na(c("Calories", "Grams")) %>%
group_by(Category) %>%
summarise(mean_calorie_density = mean(calorie_density)) %>%
arrange(mean_calorie_density)
highest_mean_category <- food_categories$Category[food_categories$mean_calorie_density==max(food_categories$mean_calorie_density)]
lowest_mean_category <- food_categories$Category[food_categories$mean_calorie_density==min(food_categories$mean_calorie_density)]
two_food_categories <- nutrients %>%
filter(Category %in% c(highest_mean_category, lowest_mean_category))
ggplot(two_food_categories, aes(x = calorie_density, y = reorder(Food, calorie_density))) +
geom_point(color = "cornflowerblue") +
facet_grid(Category~., scales = "free_y", space = "free_y") +
labs(title = "Cleveland Dot Plot of Calorie Density by Food", y = NULL) +
theme_bw()
# Use gsub() to replace t with 0
nutrients_no_t <- nutrients %>% drop_na(c("Protein", "Carbs", "Calories"))
nutrients_no_t$Protein <- gsub("t", "0", nutrients_no_t$Protein)
nutrients_no_t$Carbs<- gsub("t", "0", nutrients_no_t$Carbs)
# Combine different "Fruit" and "Vegetables" categories
nutrients_long <- nutrients_no_t %>%
mutate(Category = ifelse(Category %in% c("Fruits A-F", "Fruits G-P", "Fruits R-Z"), "Fruit", ifelse(Category %in% c("Vegetables A-E", "Vegetables F-P", "Vegetables R-Z"), "Vegetables", Category)))
# Transfer Calories, Protein, and Carbs to numeric to calculate density
nutrients_long$Calories <- as.numeric(nutrients_long$Calories)
nutrients_long$Carbs <- as.numeric(nutrients_long$Carbs)
nutrients_long$Protein <- as.numeric(nutrients_long$Protein)
nutrients_long$protein_density <- nutrients_long$Protein / nutrients_long$Grams
nutrients_long$carbs_density <- nutrients_long$Carbs / nutrients_long$Grams
ggplot(nutrients_long, aes(x = protein_density, y = carbs_density)) +
geom_point(color = "cornflowerblue") +
facet_wrap(~Category ) +
labs(title = "Scatterplot of Protein Density vs. Carbohydrate Density",
x = "Protein Density",
y = "Carbohydrate Density") +
theme_bw(4)
library(plotly)
nutrients_protein_calories <- nutrients_no_t
nutrients_protein_calories <- nutrients_protein_calories %>%
mutate(protein_calories = as.numeric(Protein) * 4)
g <- ggplot(nutrients_protein_calories, aes(Calories, protein_calories, label = Food)) + labs(title = "Protein Categories vs Overall Categories with problematic rows") +
geom_point(color = "cornflowerblue")
ggplotly(g)
# Clear Error: protein_calories shouldn't exceed overall calories, remove the rows and redraw. And there is a negative protein_calories, remove that too.
nutrients_protein_calories_rm <- nutrients_protein_calories %>%
filter(protein_calories <= Calories)
# Remove negative protein_calories
nutrients_protein_calories_rm <- nutrients_protein_calories_rm %>%
filter(protein_calories >= 0)
g2 <- ggplot(nutrients_protein_calories_rm, aes(Calories, protein_calories, label = Food)) +
geom_point(color = "cornflowerblue") + labs(title = "Protein Categories vs Overall Categories without problematic rows")
ggplotly(g2)
# Rows that are removed
rm_rows <- nutrients_protein_calories %>%
filter(protein_calories > Calories | protein_calories < 0)
print(rm_rows)
# Row 31, 32, 83, 101, 142 in the original nutrients dataset are removed.
# Calculate the percentage of protein calories
nutrients_percent <- nutrients_protein_calories_rm %>%
mutate(percentage_protein_calories = (protein_calories / Calories) * 100)
# Use case_when() from dplyr to create a new variable that relies on a complex combination of existing variables
nutrients_labels <- nutrients_percent %>%
mutate(protein_percent_labels = case_when(
percentage_protein_calories < 10 ~ "too little protein",
percentage_protein_calories >= 10 & percentage_protein_calories <= 35 ~ "recommended protein",
percentage_protein_calories > 35 ~ "too much protein"
))
#install.packages('ggrepel')
library(ggrepel)
g3 <- ggplot(nutrients_labels, aes(x = Calories, y = protein_calories, color = protein_percent_labels, label = Food)) +
geom_point() +
labs(x = "Calories", y = "protein_calories") +
geom_text_repel(segment.size = 0.1) +
# Add boundaries by geom_abline() manually
geom_abline(intercept = 1.9, slope = 0.09, col = "black") +
geom_abline(intercept = 1.9, slope = 0.35, col = "black") +
# Scale colors by labels manually
scale_color_manual(values = c("too little protein" = "#00000030", "recommended protein" = "#ff000050", "too much protein" = "#0180FF50")) +
theme_bw()
g3
library(openintro)
head(babies)
ggplot(babies, aes(y = bwt, x = gestation)) +
geom_point(size = 1.5, alpha = 0.3) +
labs(title = "Scatterplot",
y = "bwt (in ounces)",
x = "gestation (in days)")
ggplot(babies, aes(y = bwt, x = gestation)) +
geom_point(size = 1.5, alpha = 0.3) +
geom_density2d() +
labs(title = "Scatterplot with Density Contour Lines",
y = "bwt (in ounces)",
x = "gestation (in days)")
ggplot(babies, aes(y = bwt, x = gestation)) +
geom_hex(binwidth = c(5, 5)) +
scale_fill_viridis_c() +
labs(title = "Hexagonal Heatmap of Bin Counts",
y = "bwt (in ounces)",
x = "gestation (in days)")
ggplot(babies, aes(y = bwt, x = gestation)) +
geom_bin2d(binwidth = c(5, 5)) +
scale_fill_viridis_c() +
labs(title = "Square Heatmap of Bin Counts",
y = "bwt (in ounces)",
x = "gestation (in days)")
